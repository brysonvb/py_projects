Django learning path - real python
benefits
  - avoid sql code and have model documented within code
    rather than in the DB, it also avoids repetition
    (writing object and then SQL for db), keep model and
    schema in sync, migrate to different DB easier,
    tracking schema in version control

Django Migrations

create new virtual environment
    python -m venv .venv

activate environment (mac/linux)
    source .venv/scripts/activate

install django
    pipevn install django (create a new virtual environment using pipenv)

create a new django project
django-admin startproject project_name

starting an app
python manage.py startapp app_name

create models in models.py

from django.db import models
class PriceHistory(models.Model):
    date = models.DateTimeField(auto_now_add=True)
    price = models.DecimalField(max_digits_7, decimal_places=2)
    volume = models.PositiveIntegerField() -> models.DecimalField(max_digits=7, decimal_places=3) (change to test update)


make migrations

python manage.py makemigrations historical_data(optional app name) - can simplify debugging later on


using the dbshell

python manage.py dbshell
.tables -> display list of tables
.quit -> exit
.schema --indent historical_data_pricehistory (table name) -> look at table schema


migrate dbs

python manage.py migrate
python manage.py showmigrations -> show migrations that has been applied (x on column, no x not yet applied)


How to unapply migration (switch to an older version)
python manage.py migrate historical_data 0001_initial (based on version in log) (migration will show no x, not applied)

naming migrations
ls app_name/migrations/ <- will show list of migrations, better to change default names
0001_initial.py
0002_auto_2019.py <- just delete to remove unapplied migrations

python manage.py makemigrations historical_data --name change_to_decimals (more user friendly name)




